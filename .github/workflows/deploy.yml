# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# GitHub에서 볼 수 있는 Action 이름
name: CI/CD with AWS

# 이벤트 트리거.
# 특정 이벤트(push, pull_request 등)가 명시한 브랜치에서 발생하면 이 Action이 수행된다.
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        required: false
        description: 'Test scenario tags'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

# 실제 수행할 작업
jobs:
  # 작업 이름
  deploy:
    # 스크립트 실행 환경 (OS)
    runs-on: ubuntu-latest
    # 실제 실행 스크립트
    steps:
      # uses는 github actions에서 제공하는 플러그인을 실행
      # git checkout
      - name: git checkout
        uses: actions/checkout@v3

      # JDK 11 설치해서 사용
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        ## with는 플러그인 파라미터
        with:
          java-version: '11'
          distribution: 'zulu'

      ## gradle caching(빌드 속도 향상)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # create application-keys.yml
      - name: Create key files
        run: |
          echo "ls -a . & pwd"
          pwd
          ls -a .
          echo "mkdir & touch"
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-keys.properties
          pwd
          ls -a .
          echo "copy keys"
          echo "${{ secrets.KEYS_PROPERTIES_CY }}" > ./application-keys.properties
          cat application-keys.properties
        shell: bash

      # gradle 사용. arguments가 실행할 명령
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean build

      # AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWSS3
        run: |
          aws deploy push \
          --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://${{ secrets.AWS_S3_BUCKET_NAME }}/$GITHUB_SHA.zip \
          --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ secrets.AWS_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},key=$GITHUB_SHA.zip,bundleType=zip
